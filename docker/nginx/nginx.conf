server {
    listen 80;
    server_name localhost;
    root /app/public;
    
    error_log /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;

    location / {
        try_files $uri /index.php?$query_string;
    }

    location ~ \.php$ {
# Defines the address NGINX uses to connect to PHP-FPM (either TCP/IP or UNIX socket)
        fastcgi_pass production:9000; 
	
# Sets a file name that will be appended after a URI that ends with a slash, in the value of the $fastcgi_script_name variable
        fastcgi_index index.php; 
	
# Determines the path to the requested script for PHP ($document_root=$root, $fastcgi_script_name=$uri)     
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
	
# "fastcgi_params" is a file, stored in "/etc/nginx/" directory, where all other PHP variables are set (see PHP $_REQUEST array)
        include fastcgi_params;      
    }
    
    error_page 404 /index.php;
 }


# How it works:
# 1. For example, a user requests "https://localhost/en/admin/login" route, which matches "location /"
# 2. Firstly, NGINX tries to find the requested file or directory in "/app/public/en/admin/login" ($root/$uri) and finds nothing. We need to # try $uri first to be able to retrieve static files (html, images, react files, etc.) if we get a respective request
# 3. Then NGINX saves the original request "/en/admin/login" in "$request_uri", query string parameters in "$query_string" and makes an     # internal redirect to "/app/public/index.php" ($root/index.php)
# 4. A new request "/app/public/index.php" is created, which this time matches another location "location ~ \.php$"
# 5. NGINX through FastCGI protocol passes all necessary information to a proxy PHP-FPM server so, that the request makes sense to PHP      # interpretator. 
# 6. As long as "$uri" always contains currently requested URI, SCRIPT_FILENAME variable will resolve into "/app/public/index.php" ($root/  # $uri), while REQUEST_URI will contain original request "/en/admin/login" and QUERY_STRING - query string of the original request
# 7. Having received this information from NGINX, PHP-FPM passes it to PHP interpretator (see $_REQUEST array)
# 8. Interpretator runs SCRIPT_FILENAME file. The abovementioned information is sufficient for the Symfony router to process the request
# 9. PHP-FPM gives the response to NGINX, which in its part give it back to user's browser.  
